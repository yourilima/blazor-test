name: .NET Core Desktop

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: ubuntu-latest   # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: blazor                  # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100-rc.1.20452.10

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@2008f912f56e61277eefaac6d1888b750582aa16

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: dotnet restore --configuration Release

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: build the application
      run: dotnet build --configuration Release

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: dotnet publish --configuration Release

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.1.4
      with:
        # Artifact name
        name: wasm # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: D:\a\blazor-test\blazor-test\bin\Release\net5.0\publish\
        # The desired behavior if no files are found using the provided path.
        if-no-files-found: warn
